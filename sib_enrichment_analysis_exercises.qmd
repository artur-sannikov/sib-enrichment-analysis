---
title: "SIB - Enrichment Analysis"
format: html
editor: visual
---

## Exercise 1

```{r}
#| message: false
library(clusterProfiler)
library(enrichplot)
library(pathview)
library(org.Hs.eg.db)
library(ggplot2)
library(ggrepel)
library(msigdbr)

library(tidyverse) # for bonus code/dplyr/pipe

# set seed
set.seed(1234)
```

```{r}
# Import DE table:
NK_vs_Th <- read.csv("data/NK_vs_Th_diff_gene_exercise_1.csv",
  header = T
)
# Look at the structure of the data.frame:
head(NK_vs_Th)

# Search for a gene symbol in the data.frame, eg NCAM1 (CD56)
NK_vs_Th[which(NK_vs_Th$symbol == "NCAM1"), ]
```

Search for 2 genes in the data.frame, CPS1 and GZMB, and verify the effect of adjustment on their p-values

```{r}
genes <- c("CPS1", "GZMB")
NK_vs_Th |>
  filter(symbol %in% genes) |>
  select(symbol, P.Value, p.adj)
```

CPS1 is not significant, while GZMB is significant.

```{r}
# Import the adaptive immune response gene set (gmt file)
adaptive <- clusterProfiler::read.gmt("data/GOBP_ADAPTIVE_IMMUNE_RESPONSE.v7.5.1.gmt")
nrow(adaptive) # 719
```
```{r}
length(which(NK_vs_Th$symbol %in% adaptive$gene)) # 513
```

```{r}
#| label: Count genes
upregulated_th <- subset(
  NK_vs_Th,
  NK_vs_Th$p.adj <= 0.05 & NK_vs_Th$logFC < 0
)

not_significant_genes <- subset(
  NK_vs_Th,
  NK_vs_Th$p.adj > 0.05
)

summary_upregulated <- summary(upregulated_th$symbol %in% adaptive$gene)
summary_not_significant <- summary(not_significant_genes$symbol %in% adaptive$gene)
```


```{r}
#| label: Build contingency table

contingency_table <- matrix(, nrow = 2, ncol = 2)
contingency_table[[1]] <- summary_upregulated[[3]] # up, in gene set
contingency_table[[2]] <- summary_upregulated[[2]] # up, not in gene set
contingency_table[[3]] <- summary_not_significant[[3]] # down, in gene set
contingency_table[[4]] <- summary_not_significant[[2]] # down, not in gene set

# Convert to numeric
contingency_table <- apply(contingency_table, 2, as.numeric)

# Add rows and columns
colnames(contingency_table) <- c("up", "down")
rownames(contingency_table) <- c("in_set", "not_in_set")
```

```{r}
#| label: Run Fisher's exact test
fisher.test(contingency_table)
```
The odds ratio tells us how different the two proportions are.

If the confidence interval does not include 1, then p-value is small.
We can reject null hypothesis thatthe odds ratio is equal to 1.

There are more genes that are upregulated in the gene set than the genes
that are not upregulated in the gene set.

```{r}
# Test 3 gene sets among the genes up-regulated in NK cells,
# with enricher()
# First, obtain the genes up-regulated in NK:

nk_up_genes <- subset(NK_vs_Th, NK_vs_Th$logFC > 0 & NK_vs_Th$p.adj <= 0.05)$symbol

# Import 2 other gene sets, 1 un-related to immune cells:
hair <- read.gmt("data/GOBP_HAIR_CELL_DIFFERENTIATION.v7.5.1.gmt")
dim(hair)
cell_active <- read.gmt("data/GOBP_CELL_ACTIVATION.v7.5.1.gmt")
dim(cell_active)

# Combine the 3 gene sets into a single data.frame for the TERM2GENE argument:
genesets3 <- rbind(adaptive, hair, cell_active)

hyper_3genesets <- enricher(
  gene = nk_up_genes,
  universe = NK_vs_Th$symbol,
  TERM2GENE = genesets3,
  maxGSSize = 1000
)
hyper_3genesets@result
```

```{r}
sig_genes <- subset(NK_vs_Th, NK_vs_Th$symbol %in% adaptive$gene &
  NK_vs_Th$p.adj <= 0.05)
sig_genes_label <- subset(sig_genes, sig_genes$p.adj <= 0.00001)

ggplot(NK_vs_Th, aes(
  x = logFC,
  y = -log10(p.adj)
)) +
  geom_point(color = "grey87") +
  ggtitle("Genes belonging to the adaptive immune response gene set") +
  theme_bw() +
  geom_text_repel(
    data = sig_genes_label,
    aes(
      x = logFC,
      y = -log10(p.adj), label = symbol
    ),
    max.overlaps = 20
  ) +
  geom_point(data = sig_genes, col = "dodgerblue2") +
  theme(legend.position = "none") +
  scale_x_continuous(name = expression("log"[2] * "(fold change), NK vs Th cells")) +
  scale_y_continuous(name = expression("-" * "log"[10] * "(adj. p-value)")) +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
  geom_vline(xintercept = 0, linetype = "dashed")
```


## Exercise 2 - Gene set enrichment analysis (GSEA)

```{r}
#| label: Create t-statistic vector
gl <- NK_vs_Th$t
names(gl) <- make.names(NK_vs_Th$symbol, unique = T)
gl <- gl[order(gl, decreasing = T)]

GO_NK_Th <- gseGO(gl,
  ont = "BP",
  OrgDb = org.Hs.eg.db,
  keyType = "SYMBOL",
  minGSSize = 30,
  eps = 0,
  seed = T
)
```

```{r}
#| label: Explore t-statistic

GO_NK_Th

# Class is gseaResult
class(GO_NK_Th)

# Is the adaptive immune response gene set significant?
GO_NK_Th[GO_NK_Th@result$Description == "adaptive immune response", ] # yes


# How many gene sets are down- or up-regulated?
count_gene_sets <- function(gsea, p_value) {
  up <- summary(gsea@result$p.adjust < p_value & gsea@result$NES > 0)
  down <- summary(gsea@result$p.adjust < p_value & gsea@result$NES < 0)

  return(list(upregulated = up, downregulated = down))
}

# 290 upregulated, 61 downregulated
count_gene_sets(GO_NK_Th, 0.05)
```

```{r}
#| label: Simplify GSEA results
GO_NK_Th_simplify <- clusterProfiler::simplify(GO_NK_Th)
GO_NK_Th_simplify@result[GO_NK_Th_simplify@result$Description == "adaptive immune response", ]
```

```{r}
#| label: Obtain list of leading edge genes

unlist(strsplit(
  GO_NK_Th@result[GO_NK_Th@result$Description == "adaptive immune response", 11],
  "\\/"
))
```

```{r}
#| label: Obtain the list of all genes included in a GO term

GO_NK_Th@geneSets$`GO:0002250`
```

```{r}
GO_enrich <- enrichGO(
  gene = nk_up_genes,
  OrgDb = org.Hs.eg.db,
  keyType = "SYMBOL",
  ont = "MF", # ont="MF" is the default
  minGSSize = 30, universe = NK_vs_Th$symbol
)
```


## Exercise 3 - Visualization of enrichment results

```{r}
#| label: Barplot of log-adjusted p-values of GO terms

par(mar = c(5, 20, 3, 3))
barplot(rev(-log10(GO_NK_Th@result$p.adjust[1:10])),
  horiz = T, names = rev(GO_NK_Th@result$Description[1:10]),
  las = 2, xlab = "-log10(adj.p-value)",
  cex.names = 0.7,
  col = "lightgreen"
)
abline(v = -log10(0.05))
```

```{r}
#| label: Plot of top 10 up- and down-regulated gene sets
sorted_GO_NK_Th <- GO_NK_Th@result[order(GO_NK_Th@result$NES, decreasing = F), ]
sorted_GO_NK_Th$colors <- ifelse(sorted_GO_NK_Th$NES > 0, "red", "blue")

# Get the indices of the vector
bottom_values <- tail(seq_along(sorted_GO_NK_Th$NES), 10)

par(mar = c(5, 15, 3, 3)) # Make the figure canvas larger
barplot(sorted_GO_NK_Th$NES[c(1:10, bottom_values:nrow(sorted_GO_NK_Th))],
  horiz = T, names = sorted_GO_NK_Th$Description[c(1:10, bottom_values:nrow(sorted_GO_NK_Th))],
  las = 2, xlab = "NES",
  cex.names = 0.7,
  col = sorted_GO_NK_Th$color[c(1:10, (nrow(sorted_GO_NK_Th) - 9):nrow(sorted_GO_NK_Th))]
)
abline(v = 0)
```

```{r}
# Use the GO_enrich analysis performed above, of the over-representation analysis
# of genes up-regulated in NK cells:
# barplot() can be directly used on enrichResult objects: but not on gseaResult objects
graphics::barplot(GO_enrich)
graphics::barplot(GO_enrich, color = "qvalue", x = "GeneRatio")

# Select only 2 out of the significant gene sets:
ego_selection <- GO_enrich[GO_enrich@result$ID == "GO:0042287" | GO_enrich@result$ID == "GO:0004713", asis = T]
barplot(ego_selection)
```

```{r}
#| label: Barcode plot

# Barcode plot
# You need the ID of the GO gene set to plot:
GO_NK_Th@result[1:10, 1:6]

# For a gene set that is down-regulated in NK cells:
gseaplot(GO_NK_Th,
  geneSetID = "GO:0002181",
  title = "GO:0002181 - cytoplasmic translation"
)
# And one that is up-regulated in NK cells
gseaplot(GO_NK_Th,
  geneSetID = "GO:0002443",
  title = "GO:0002443 - leukocyte mediated immunity"
)
```

```{r}
#| label: Enrich dotplot

enrichplot::dotplot(GO_enrich, orderBy = "p.adjust")
enrichplot::dotplot(GO_NK_Th, orderBy = "p.adjust")
```

```{r}
#| label: Gene concept network

cnetplot(GO_enrich, categorySize = "pvalue")
cnetplot(GO_NK_Th, showCategory = 3)
```

```{r}
#| label: Enrichment map

ego2 <- pairwise_termsim(GO_NK_Th)
emapplot(ego2, color = "p.adjust")
```


```{r}
#| label: Ridgeplots
#| fig-height: 12

# Wrap lenght of labels
label_format <- 50

# Distribution of t-statistic for genes included in significant gene sets or in selected gene sets:
ridgeplot(GO_NK_Th, label_format = label_format)

# What is the difference with core_enrichment =F?
ridgeplot(GO_NK_Th, core_enrichment = FALSE, label_format = label_format)

# Select which GO terms to show in the ridge plot:
GO_NK_Th_selection_1 <- GO_NK_Th[GO_NK_Th$ID == "GO:0002181", asis = TRUE]
GO_NK_Th_selection_3 <- GO_NK_Th[
  GO_NK_Th$ID %in% c(
    "GO:0002181", "GO:0022613",
    "GO:0042254"
  ),
  asis = TRUE
]

# Terms that contain the keyword "leukocyte"
GO_NK_Th_selection <- GO_NK_Th[grep("leukocyte", GO_NK_Th@result$Description), asis = TRUE]
ridgeplot(GO_NK_Th_selection, label_format = label_format)
```


```{r}
#| label: Ridge plot of selected GO terms
ridgeplot(GO_NK_Th_selection_1)
ridgeplot(GO_NK_Th_selection_3)
```


## Exercise 4 - Enrichment of other collections of gene sets

```{r}
#| label: Convert genes
keytypes(org.Hs.eg.db)
# convert from= "ENSEMBL" to "SYMBOL" and "ENTREZID"
gene_convert <- bitr(as.character(NK_vs_Th$ensembl_gene_id),
  fromType = "ENSEMBL",
  toType = c("SYMBOL", "ENTREZID"), OrgDb = "org.Hs.eg.db"
)

# Check the format of the data frame obtained after conversion:
head(gene_convert)
dim(gene_convert)
```

```{r}
#| label: Read KEGG annotation

# Create a vector of genes that are coded with the EntrezID:
# use the sorted gene list gl previously created:
gl_kegg <- cbind(SYMBOL = names(gl), t = gl)

# merge with converted gene symbols to combine both:
# by default the data frames are merged on the columns with names they both have
gl_kegg <- merge(gl_kegg, gene_convert)
head(gl_kegg)

gl_kegg_list <- as.numeric(as.character(gl_kegg$t))
names(gl_kegg_list) <- as.character(gl_kegg$ENTREZID)
gl_kegg_list <- sort(gl_kegg_list, decreasing = T)

# run GSEA of KEGG (please note that requires internet connection to download the KEGG annotations from http)
KEGG_NK_Th <- gseKEGG(gl_kegg_list,
  organism = "hsa", "ncbi-geneid",
  minGSSize = 30,
  eps = 0,
  seed = T
)
```

```{r}
# What does it contain?
str(KEGG_NK_Th)
```

```{r}
#| label: Upregulated genes in KEGG

# How many gene sets are up-regulated?
sum(KEGG_NK_Th@result$NES > 0) # 17
```


```{r}
#| label: function-grep_kegg_description
#|
grep_kegg_description <- function(pattern) {
  return(grep(pattern, tolower((KEGG_NK_Th@result$Description))))
}
```


```{r}
# Is their an immune-related gene set significant?
grep_kegg_description("immune")
```
```{r}
#| label: Upregulated NK-related  gene set

# Is their an NK gene set significant?
grep_kegg_description("natural killer") # 3
```
```{r}
#| label: Total number of built-in KEGG gene sets

# What is the total number of built-in KEGG gene sets?
length(KEGG_NK_Th@geneSets) # 265
```

```{r}
#| label: Extract Entrez id for NK-related gene set
KEGG_NK_Th[grep_kegg_description("natural killer"), ] |>
  select(ID, Description) # hsa04650
```
```{r}
#| label: Genes involved in Natural killer cell mediated cytotoxicity (hsa04650)

KEGG_NK_Th@geneSets$hsa04650
```

```{r}
# pathview map with non-significant genes in grey:
# set log fold change of non-significant genes to 0:
NK_vs_Th$logFC_0 <- ifelse(NK_vs_Th$p.adj > 0.05, 0, NK_vs_Th$logFC)

# create named vector of fold change values:
genePW <- NK_vs_Th$logFC_0
names(genePW) <- NK_vs_Th$symbol

# Create pathview map for Ribosome = hsa03010
pathview(
  gene.data = genePW,
  pathway.id = "hsa03010",
  species = "hsa",
  gene.idtype = "SYMBOL"
)

# Create pathview map of Natural killer cell mediated cytotoxicity = hsa04650
pathview(
  gene.data = genePW,
  pathway.id = "hsa04650",
  species = "hsa",
  gene.idtype = "SYMBOL"
)
```

```{r}
# Import hallmark, convert to term2gene and run GSEA:
term2gene_h <- msigdbr(species = "Homo sapiens", category = "H")
# Or alternatively:
# term2gene_h<-read.gmt("h.all.v2023.2.Hs.symbols.gmt")

head(term2gene_h)
length(unique(term2gene_h$gs_name)) # 50

# Run GSEA with the function that allows to use custom gene sets,
# provide the named vector of t statistics
h_NK_vs_Th <- GSEA(gl,
  TERM2GENE = term2gene_h[, c("gs_name", "gene_symbol")],
  eps = 0,
  seed = T
)

# Number of significant gene sets:
length(which(h_NK_vs_Th@result$p.adjust <= 0.05))
```

```{r}
# A dotplot with geneRatio or NES on the x-axis:
dotplot(h_NK_vs_Th)
dotplot(h_NK_vs_Th, x = "NES", orderBy = "p.adjust")

# A barcode plot:
gseaplot2(h_NK_vs_Th,
  geneSetID = "HALLMARK_MTORC1_SIGNALING",
  title = "HALLMARK_MTORC1_SIGNALING"
)
```

## Extra exercises

```{r}
#| label: Significant Reactome gene sets

# Read in Reactome genes
reactome_gene_sets <- msigdbr(category = "C2", subcategory = "CP:REACTOME")

# Run GSEA with Reactome database
reactome_NK_vs_Th <- GSEA(gl,
  minGSSize = 30,
  TERM2GENE = reactome_gene_sets[, c("gs_name", "gene_symbol")],
  eps = 0, seed = TRUE
)

# Count number of significant gene sets
reactome_significant <- length(which(reactome_NK_vs_Th@result$p.adjust < 0.05))
print(paste("Number of significant gene sets with Reactome database is", reactome_significant))
```

```{r}
#| label: Visualize Reactome gene sets (barplot)
par(mar = c(5, 20, 3, 3) + 0.1)
# Recode long labels
reactome_NK_vs_Th@result$Description_short <-
  reactome_NK_vs_Th@result$Description |>
  case_match(
    "REACTOME_REGULATION_OF_EXPRESSION_OF_SLITS_AND_ROBOS" ~ "Slits/robos expression regulation",
    "REACTOME_RRNA_PROCESSING" ~ "rRNA processing",
    "REACTOME_INFLUENZA_INFECTION" ~ "Influenza infection",
    "REACTOME_SELENOAMINO_ACID_METABOLISM" ~ "Selenoaminoacid metabolism",
    "REACTOME_SRP_DEPENDENT_COTRANSLATIONAL_PROTEIN_TARGETING_TO_MEMBRANE" ~ "SRP-dep. cotranslational membrane targeting",
    "REACTOME_RESPONSE_OF_EIF2AK4_GCN2_TO_AMINO_ACID_DEFICIENCY" ~ "EIF2AK4(GCN2) AA deficiency response",
    "REACTOME_NONSENSE_MEDIATED_DECAY_NMD" ~ "Nonsense mediated decay NMD",
    "REACTOME_EUKARYOTIC_TRANSLATION_INITIATION" ~ "Eukaryotic translation initiation",
    "REACTOME_TRANSLATION" ~ "Translation",
    "REACTOME_EUKARYOTIC_TRANSLATION_ELONGATION" ~ "Eukaryotic translation elongation"
  )

# Bar plot
barplot(rev(-log10(reactome_NK_vs_Th@result$p.adjust[1:10])),
  horiz = TRUE, names = rev(reactome_NK_vs_Th@result$Description_short[1:10]),
  las = 2, xlab = "-log10(adj.p-value)",
  cex.names = 0.7,
  col = "lightgreen"
)
abline(v = -log10(0.05))
```

```{r}
#| label: Visualize Reactome gene sets (another barplot version)
#| fig-width: 10
reactome_NK_vs_Th@result$Description_short2<-gsub("_", " ", 
                                                  gsub("REACTOME_", "",
                                                       reactome_NK_vs_Th@result$Description))
reactome_NK_vs_Th_sorted<-reactome_NK_vs_Th@result[order(reactome_NK_vs_Th@result$NES,
                                                         decreasing = F),]

reactome_NK_vs_Th_sorted$colors <- ifelse(reactome_NK_vs_Th_sorted$NES > 0, "red", "blue")


par(mar = c(4, 30, 1, 1)) # Make the figure margins larger
barplot(reactome_NK_vs_Th_sorted$NES,
        horiz = TRUE, names = reactome_NK_vs_Th_sorted$Description_short2,
        las = 2, xlab = "Normalized enrichment score",
        cex.names = 0.5,
        col = reactome_NK_vs_Th_sorted$colors
)
```


```{r}
#| label: Visualize Reactome gene sets (gseaplot - downregulated)
#| fig-height: 8

gseaplot(reactome_NK_vs_Th,
  geneSetID = "REACTOME_EUKARYOTIC_TRANSLATION_ELONGATION",
  title = "Reactome - Eukaryotic translation elongation"
)
```

```{r}
#| label: Visualize Reactome gene sets (gseaplot - upregulated)
#| fig-height: 8

gseaplot(reactome_NK_vs_Th,
  geneSetID = "REACTOME_DAP12_INTERACTIONS",
  title = "Reactome - DAP12 interaction"
)
```
